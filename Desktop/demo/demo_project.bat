@echo off
setlocal enabledelayedexpansion

echo üîê Secure Communication Protocol
echo ==========================================
echo Project Demo and Information
echo.

echo üìÅ Project Structure Check:
echo ------------------------------
if exist "CMakeLists.txt" (
    echo ‚úÖ CMakeLists.txt
) else (
    echo ‚ùå CMakeLists.txt
)

if exist "include\common.h" (
    echo ‚úÖ include\common.h
) else (
    echo ‚ùå include\common.h
)

if exist "crypto\crypto_utils.h" (
    echo ‚úÖ crypto\crypto_utils.h
) else (
    echo ‚ùå crypto\crypto_utils.h
)

if exist "crypto\crypto_utils.cpp" (
    echo ‚úÖ crypto\crypto_utils.cpp
) else (
    echo ‚ùå crypto\crypto_utils.cpp
)

if exist "server\server.cpp" (
    echo ‚úÖ server\server.cpp
) else (
    echo ‚ùå server\server.cpp
)

if exist "client\client.cpp" (
    echo ‚úÖ client\client.cpp
) else (
    echo ‚ùå client\client.cpp
)

if exist "README.md" (
    echo ‚úÖ README.md
) else (
    echo ‚ùå README.md
)

echo.

echo üîß Tool Availability Check:
echo ------------------------------
where cmake >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ cmake - CMake build system
) else (
    echo ‚ùå cmake - CMake build system
)

where cl >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ cl - Visual Studio C++ compiler
) else (
    echo ‚ùå cl - Visual Studio C++ compiler
)

where g++ >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ g++ - GNU C++ compiler
) else (
    echo ‚ùå g++ - GNU C++ compiler
)

where make >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ make - Make build tool
) else (
    echo ‚ùå make - Make build tool
)

echo.

echo üìã Project Information:
echo ------------------------------
echo Project Name: Secure Communication Protocol
echo Language: C++17
echo Cryptography: OpenSSL
echo Network: TCP Sockets
echo Build System: CMake
echo Security Features:
echo   ‚Ä¢ RSA-2048 key exchange
echo   ‚Ä¢ Diffie-Hellman forward secrecy
echo   ‚Ä¢ AES-256-GCM encryption
echo   ‚Ä¢ Digital signatures
echo   ‚Ä¢ Key rotation
echo   ‚Ä¢ Session management
echo.

echo üîí Security Features:
echo ------------------------------
echo ‚Ä¢ Key Exchange: RSA-2048 for initial key exchange, Diffie-Hellman for forward secrecy
echo ‚Ä¢ Encryption: AES-256-GCM for authenticated encryption
echo ‚Ä¢ Authentication: Digital signatures using RSA-2048
echo ‚Ä¢ Forward Secrecy: Automatic key rotation every 10 messages
echo ‚Ä¢ Session Management: Secure session tracking and authentication
echo ‚Ä¢ Random Generation: Cryptographically secure random number generation
echo ‚Ä¢ Key Derivation: PBKDF2 for secure key derivation
echo ‚Ä¢ Message Integrity: HMAC-SHA256 for message authentication
echo.

echo üîÑ Protocol Flow:
echo ------------------------------
echo 1. Client connects to server
echo 2. Handshake initiation (RSA key exchange)
echo 3. Diffie-Hellman key exchange for forward secrecy
echo 4. Session key derivation using PBKDF2
echo 5. Secure message exchange using AES-256-GCM
echo 6. Automatic key rotation for forward secrecy
echo 7. Digital signature verification for authentication
echo.

echo üöÄ Usage Instructions:
echo ------------------------------
echo 1. Build the project:
echo    ‚Ä¢ Windows: .\build.bat or .\build_vs.bat
echo    ‚Ä¢ Linux/macOS: ./build.sh
echo.
echo 2. Run the server:
echo    ‚Ä¢ server.exe [port]
echo    ‚Ä¢ Default port: 8080
echo.
echo 3. Run the client:
echo    ‚Ä¢ client.exe ^<server_ip^> [port]
echo    ‚Ä¢ Example: client.exe 127.0.0.1 8080
echo.
echo 4. Interactive client commands:
echo    ‚Ä¢ Type messages to send encrypted data
echo    ‚Ä¢ 'rotate' - Request key rotation
echo    ‚Ä¢ 'quit' or 'exit' - Close client
echo.

echo üìä Summary:
echo ------------------------------
if exist "CMakeLists.txt" (
    echo ‚úÖ Project structure is complete
) else (
    echo ‚ùå Some project files are missing
)

set tools_found=0
where cmake >nul 2>&1 && set /a tools_found+=1
where cl >nul 2>&1 && set /a tools_found+=1
where g++ >nul 2>&1 && set /a tools_found+=1
where make >nul 2>&1 && set /a tools_found+=1

if %tools_found% gtr 0 (
    echo ‚úÖ Found %tools_found% build tools
    where cmake >nul 2>&1 && echo ‚úÖ CMake is available - you can build the project!
) else (
    echo ‚ùå No build tools found
    echo üí° To build this project, you need:
    echo    ‚Ä¢ CMake (‚úÖ already installed)
    echo    ‚Ä¢ A C++ compiler (Visual Studio, MinGW, or GCC)
    echo    ‚Ä¢ OpenSSL development libraries
)

echo.
echo üéØ Next Steps:
echo 1. Install a C++ compiler if not available
echo 2. Run the build script: .\build.bat
echo 3. Start the server: server.exe
echo 4. Connect with client: client.exe 127.0.0.1
echo.
echo üìñ For detailed information, see README.md 